"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNumberSet = void 0;
const keyword_defaults_1 = require("../set/keyword-defaults");
const number_subset_1 = require("../set/subset/number-subset");
const type_set_1 = require("../set/type-set");
const is_type_supported_1 = require("./is-type-supported");
const supportsAllNumbers = (numberSetParsedKeywords) => 
// tslint:disable:cyclomatic-complexity
is_type_supported_1.isTypeSupported(numberSetParsedKeywords.type, 'number')
    && numberSetParsedKeywords.maximum === keyword_defaults_1.defaultMaximum
    && numberSetParsedKeywords.minimum === keyword_defaults_1.defaultMinimum
    && numberSetParsedKeywords.exclusiveMaximum === keyword_defaults_1.defaultMaximum
    && numberSetParsedKeywords.exclusiveMinimum === keyword_defaults_1.defaultMinimum;
const supportsNoNumbers = (numberSetParsedKeywords) => !is_type_supported_1.isTypeSupported(numberSetParsedKeywords.type, 'number') && !is_type_supported_1.isTypeSupported(numberSetParsedKeywords.type, 'integer');
const createNumberSubset = (numberSetParsedKeywords) => {
    if (supportsNoNumbers(numberSetParsedKeywords)) {
        return number_subset_1.emptyNumberSubset;
    }
    if (supportsAllNumbers(numberSetParsedKeywords)) {
        return number_subset_1.allNumberSubset;
    }
    const isInteger = !is_type_supported_1.isTypeSupported(numberSetParsedKeywords.type, 'number');
    return number_subset_1.createNumberSubsetFromConfig({
        exclusiveMaximum: numberSetParsedKeywords.exclusiveMaximum,
        exclusiveMinimum: numberSetParsedKeywords.exclusiveMinimum,
        maximum: numberSetParsedKeywords.maximum,
        minimum: numberSetParsedKeywords.minimum,
        isInteger,
        not: []
    });
};
const createNumberSet = (numberSetParsedKeywords) => {
    const numberSubset = createNumberSubset(numberSetParsedKeywords);
    return type_set_1.createTypeSetFromSubsets('number', [numberSubset]);
};
exports.createNumberSet = createNumberSet;
